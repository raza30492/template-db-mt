package com.jazasoft.mt.tenant;

import com.jazasoft.mt.entity.master.Company;
import com.jazasoft.mt.repository.master.CompanyRepository;
import com.jazasoft.mt.util.Utils;
import org.hibernate.HibernateException;
import org.hibernate.engine.jdbc.connections.spi.AbstractDataSourceBasedMultiTenantConnectionProviderImpl;
import org.hibernate.engine.jdbc.connections.spi.MultiTenantConnectionProvider;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

import javax.annotation.PostConstruct;
import javax.inject.Inject;
import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.SQLException;
import java.util.HashMap;
import java.util.Map;
import java.util.Properties;

/**
 * Created by mdzahidraza on 26/06/17.
 */

@Component
@Transactional(value="masterTransactionManager", readOnly = true)
public class MultiTenantConnectionProviderImpl extends AbstractDataSourceBasedMultiTenantConnectionProviderImpl implements ApplicationListener<ContextRefreshedEvent>{

    private static final long serialVersionUID = 6246085840652870138L;

    private final static Logger LOGGER = LoggerFactory.getLogger(MultiTenantConnectionProviderImpl.class);

    private Map<String, DataSource> map; // map holds the companyKey => DataSource

    @Inject
    private CompanyRepository companyRepository;

    @Value("${spring.datasource.url}")
    private String url;

    @Value("${spring.datasource.dataSourceClassName}")
    private String dataSourceClassName;

    @Value("${spring.datasource.username}")
    private String user;

    @Value("${spring.datasource.password}")
    private String password;

    @Inject
    private DataSource dataSource; // injected here to get properties and to provide default.

    @Inject
    private Properties properties;

    @PostConstruct
    public void load() {
        map = new HashMap<>();
    }

    public void init() {
        for (Company company : companyRepository.findAll()) {
            // in this experiment we are just using one instance of mysql. URL is generated by replacing master database
            // name with company key to get new database URL
            try {
                String companyDbUrl = url.replace(Utils.databaseNameFromJdbcUrl(url), company.getDbName());
                LOGGER.debug("Configuring datasource {} {} {}", dataSourceClassName, companyDbUrl, user);
                map.put(company.getDbName(), getDatasource(companyDbUrl));
                //initDbWithLiquibase(ds);
            } catch (Exception e) {
                LOGGER.error("Error in database URL {}", url, e);
            }
        }
    }

//    private void initDbWithLiquibase(HikariDataSource ds) throws SQLException, LiquibaseException {
//        Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(
//                new JdbcConnection(ds.getConnection()));
//        Liquibase liquibase = new Liquibase("dbchangelog-product.xml", new ClassLoaderResourceAccessor(), database);
//        liquibase.update("test, production");
//    }

    @Override
    protected DataSource selectAnyDataSource() {
        LOGGER.debug("######### Selecting any data source");
        return dataSource;
    }

    @Override
    protected DataSource selectDataSource(String tenantIdentifier) {
        LOGGER.debug("+++++++++++ Selecting data source for {}", tenantIdentifier);
        return map.containsKey(tenantIdentifier) ? map.get(tenantIdentifier) : dataSource ;
    }

    @Override
    public void onApplicationEvent(ContextRefreshedEvent contextRefreshedEvent) {
        // This is super critical to initialize after application is done with configuring beans.
        // otherwise you can not use companyRepository to fetch all the companies
        init();
    }

    // TODO: add methods to add the datasources as companies are registered.

    public void addDatasource(String tenantIdentifier) {
        String companyDbUrl = url.replace(Utils.databaseNameFromJdbcUrl(url), tenantIdentifier);
        LOGGER.debug("adding datasource {} {} {}", dataSourceClassName, companyDbUrl, user);
        map.put(tenantIdentifier, getDatasource(companyDbUrl));
    }

    private DataSource getDatasource(String companyDbUrl) {
        DriverManagerDataSource dataSource = new DriverManagerDataSource();
        dataSource.setDriverClassName(dataSourceClassName);
        dataSource.setUrl(companyDbUrl);
        dataSource.setUsername(user);
        dataSource.setPassword(password);
        return dataSource;
    }

}


